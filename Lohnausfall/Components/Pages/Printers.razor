@page "/drucker"

@inject ISnackbar Snackbar

@using System.Runtime.InteropServices
@using System.Diagnostics
@using System.Collections.ObjectModel
@using System.Drawing.Printing
@using Lohnausfall.Core.Models

<PageTitle>Lohnausfall - Feuerwehr Saalhausen</PageTitle>

<MudStack Row Justify=Justify.SpaceBetween>
    <MudText Typo=Typo.h4 Color=Color.Secondary Style="margin-bottom: 0px">Drucker</MudText>
</MudStack>

<MudSelect T=Core.Models.WindowsPrinter Style="margin-top: 22px" Variant=Variant.Outlined Adornment=Adornment.End AdornmentIcon=@Icons.Material.Filled.Print 
    AnchorOrigin=Origin.BottomCenter Label="Drucker auswählen" Value=_selectedPrinter ValueChanged="(value) => { _selectedPrinter = value; ChangeDefaultPrinter(); }">
    @foreach (var printer in _installedPrinters)
    {
        <MudSelectItem T=Core.Models.WindowsPrinter Value=printer>@printer.Name</MudSelectItem>
    }
</MudSelect>

@code {
    public class Printer
    {
        [DllImport("winspool.drv", CharSet = CharSet.Auto, SetLastError = true)]
        public static extern bool SetDefaultPrinter(string Printer);
    }

    private List<Core.Models.WindowsPrinter> _installedPrinters = [];
    private Core.Models.WindowsPrinter? _selectedPrinter;
    private PrinterSettings _printerSettings = new();

    protected override Task OnInitializedAsync()
    {
        try
        {
            var printers = new List<Core.Models.WindowsPrinter>();

            foreach (var printer in PrinterSettings.InstalledPrinters)
                printers.Add(new Core.Models.WindowsPrinter(_installedPrinters.Count, printer.ToString()!, printer.ToString()! == _printerSettings.PrinterName));

            _selectedPrinter = printers.FirstOrDefault(printer => printer.IsDefaultPrinter == true);
            _installedPrinters = printers.OrderBy(printer => printer.Name).ToList();

            return base.OnInitializedAsync();
        }
        catch(Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
            return base.OnInitializedAsync();
        }
    }

    private void ChangeDefaultPrinter()
    {
        try
        {
            Process.Start("cmd.exe", @$"/K RUNDLL32 PRINTUI.DLL,PrintUIEntry /y /n ""{_selectedPrinter!.Name}"" && exit");
            Printer.SetDefaultPrinter(_selectedPrinter.Name);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }
}