@page "/"

@inject ISnackbar Snackbar
@inject IMembersService MembersService

@using Lohnausfall.Components.Classes
@using Lohnausfall.Components.Interfaces
@using Lohnausfall.Core.Models
@using Syncfusion.Pdf.Parsing
@using System.Diagnostics
@using iTextSharp.text.pdf

<PageTitle>Lohnausfall - Feuerwehr Saalhausen</PageTitle>

<MudStack Row Justify=Justify.SpaceBetween>
    <MudText Typo=Typo.h4 Color=Color.Secondary Style="margin-bottom: 0px">Lohnausfall</MudText>
    <MudButton Disabled=@(string.IsNullOrWhiteSpace(_emergencyNumber) || _selectedMembers.ToList().Count is 0) Style="height: 65%" StartIcon=@Icons.Material.Filled.Check
        Variant=Variant.Outlined OnClick=Generate>Generieren</MudButton>
</MudStack>

<MudGrid Style="margin-top: 10px" Spacing=1 Justify=Justify.FlexStart>
    <MudItem xs=3>
        <MudTextField Variant=Variant.Outlined Immediate Adornment=Adornment.End AdornmentIcon=@Icons.Material.Filled.Tag Clearable Label="Einsatznummer"
            @bind-Value=_emergencyNumber />
    </MudItem>

    <MudItem xs=3>
        <MudDatePicker Variant=Variant.Outlined Adornment=Adornment.End AdornmentIcon=@Icons.Material.Filled.CalendarMonth Label="Datum" Date="_date" 
            DateChanged="(value) => _date = (DateTime)value!" />
    </MudItem>

    <MudItem xs=3>
        <MudTimePicker Variant=Variant.Outlined Adornment=Adornment.End AdornmentIcon=@Icons.Material.Filled.Timer Label="Start" Time=_start 
            TimeChanged="(value) => _start = (TimeSpan)value!" />
    </MudItem>

    <MudItem xs=3>
        <MudTimePicker Variant=Variant.Outlined Adornment=Adornment.End AdornmentIcon=@Icons.Material.Filled.Timer Label="Ende" Time=_end 
            TimeChanged="(value) => _end = (TimeSpan)value!"/>
    </MudItem>

    <MudItem xs=6>
        <MudNumericField Variant=Variant.Outlined Immediate Adornment=Adornment.End AdornmentIcon=@Icons.Material.Filled.FilterNone Label="Anzahl Bescheinigungen"
            @bind-Value=_numberOfSheets />
    </MudItem>

    <MudItem xs=6>
        <MudSelect T="Member" MultiSelection Clearable Variant=Variant.Outlined Adornment=Adornment.End AdornmentIcon=@Icons.Material.Filled.People
                   AnchorOrigin=Origin.BottomCenter Label="Beteiligte Mitglieder auswählen" ToStringFunc=@(member => $"{member.Firstname} {member.Lastname}") 
                   @bind-selectedvalues=_selectedMembers>
            @foreach (var member in _members)
            {
                <MudSelectItem T="Member" Value=member>@($"{member.Firstname} {member.Lastname}")</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
</MudGrid>

@code {
    private string _emergencyNumber = "";
    private DateTime _date = DateTime.Today;
    private TimeSpan _start = DateTime.Now.TimeOfDay;
    private TimeSpan _end = DateTime.Now.TimeOfDay;
    private int _numberOfSheets = 1;

    private List<Member> _members = [];
    private IEnumerable<Member> _selectedMembers = new HashSet<Member>();

    protected override void OnInitialized()
    {
        try
        {
            _members = MembersService.GetAll()
                .OrderBy(member => member.Lastname)
                .ToList();
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

    /// <summary>
    /// Obermethode zum generieren und drucken des Lohnausfalls basierend auf allen Angaben
    /// </summary>
    private void Generate()
    {
        try
        {
            EmergencyDurationCalculation emergencyDuration = new(_start, _end);
            (double totalTime, TimeSpan end) = emergencyDuration.GetDuration();

            var success = GeneratePdf(totalTime, end);
            var printSuccess = Process();

            if (success && printSuccess) Snackbar.Add("Lohnausfall wurde erfolgreich generiert", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

    /// <summary>
    /// Generiert alle nötigen Lohnausfall Pdf Dateien.
    /// </summary>
    /// <param name="totalTime">Gerundete gesamte Einsatzzeit</param>
    /// <param name="end">Gerundetes Einsatzende</param>
    /// <returns></returns>
    private bool GeneratePdf(double totalTime, TimeSpan end)
    {
        try
        {
            DeleteAllFiles();

            var members = _selectedMembers.ToList();

            // Zwei Lohnausfälle können auf einem Blatt stehen
            for (int i = 0; i < members.Count; i += 2)
            {
                var templatePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Template.pdf");
                var outputPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, $"Lohnausfall\\Lohnausfall_{i}.pdf");

                using PdfReader reader = new(templatePath);
                using FileStream fileStream = new(outputPath, FileMode.Create);
                PdfStamper pdfStamper = new(reader, fileStream);

                var fields = pdfStamper.AcroFields;

                fields.SetField("Textfeld#2011", $"{members[i].Firstname} {members[i].Lastname}");
                fields.SetField("Textfeld#201", members[i].Residence!.Name);
                fields.SetField("Datumsfeld#201", _date.ToString("dd.MM.yyyy"));
                fields.SetField("Zeitfeld#201", _start.ToString(@"hh\:mm"));
                fields.SetField("Zeitfeld#2011", end.ToString(@"hh\:mm"));
                fields.SetField("Textfeld#206", $"Einsatz {_emergencyNumber}");
                fields.SetField("Textfeld#204", $"{totalTime}");
                fields.SetField("Datumsfeld#202", DateTime.Now.Date.ToString("dd.MM.yyyy"));

                if (i < members.Count - 1)
                {
                    fields.SetField("Textfeld#2013", $"{members[i + 1].Firstname} {members[i + 1].Lastname}");
                    fields.SetField("Textfeld#2012", members[i + 1].Residence!.Name);
                    fields.SetField("Datumsfeld#2011", _date.ToString("dd.MM.yyyy"));
                    fields.SetField("Zeitfeld#2012", _start.ToString(@"hh\:mm"));
                    fields.SetField("Zeitfeld#2013", end.ToString(@"hh\:mm"));
                    fields.SetField("Textfeld#205", $"Einsatz {_emergencyNumber}");
                    fields.SetField("Textfeld#202", $"{totalTime}");
                    fields.SetField("Datumsfeld#2021", DateTime.Now.Date.ToString("dd.MM.yyyy"));
                }

                pdfStamper.Close();
            }

            return true;
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
            return false;
        }
    }

    private bool Process()
    {
        try
        {
            // Lohnausfälle drucken
            var folderPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Lohnausfall");
            if (Directory.Exists(folderPath))
            {
                var filePaths = Directory.EnumerateFiles(folderPath);
                foreach (var path in filePaths) Print(path);
            }

            // Nach drucken alle Dateien löschen
            DeleteAllFiles();

            // Bescheinigungen drucken
            var filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Erstattung Lohnkosten für Feuerwehreinsatz.doc");
            if (File.Exists(filePath)) 
                for (int i = 0; i < _numberOfSheets; i++) Print(filePath);

            return true;
        }
        catch (Exception e)
        {
            return false;
        }
    }

    /// <summary>
    /// Druck die Datei für den angegebenen Pfad über den ausgewählten Windows Standarddrucker aus.
    /// </summary>
    /// <param name="path">Dateipfad des Lohnausfalls bzw. der Bescheinigung</param>
    private void Print(string path)
    {
        try
        {
            var command = $"Start-Process –FilePath \"{path}\" -verb Print";
            ProcessStartInfo processInfo = new("Powershell.exe", command);

            Process process = new() { StartInfo = processInfo };
            process.Start();

            Thread.Sleep(3000);
            if (process.CloseMainWindow() is false) process.Kill();
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

    private void DeleteAllFiles()
    {
        var directoryInfo = new DirectoryInfo($"{AppDomain.CurrentDomain.BaseDirectory}Lohnausfall");
        foreach (var file in directoryInfo.GetFiles()) file.Delete();
    }
}